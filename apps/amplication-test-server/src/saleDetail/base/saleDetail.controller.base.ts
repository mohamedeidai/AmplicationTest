/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SaleDetailService } from "../saleDetail.service";
import { SaleDetailCreateInput } from "./SaleDetailCreateInput";
import { SaleDetail } from "./SaleDetail";
import { SaleDetailFindManyArgs } from "./SaleDetailFindManyArgs";
import { SaleDetailWhereUniqueInput } from "./SaleDetailWhereUniqueInput";
import { SaleDetailUpdateInput } from "./SaleDetailUpdateInput";

export class SaleDetailControllerBase {
  constructor(protected readonly service: SaleDetailService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SaleDetail })
  async createSaleDetail(
    @common.Body() data: SaleDetailCreateInput
  ): Promise<SaleDetail> {
    return await this.service.createSaleDetail({
      data: {
        ...data,

        item: {
          connect: data.item,
        },

        sale: {
          connect: data.sale,
        },
      },
      select: {
        createdAt: true,
        id: true,

        item: {
          select: {
            id: true,
          },
        },

        quantity: true,

        sale: {
          select: {
            id: true,
          },
        },

        unitPrice: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SaleDetail] })
  @ApiNestedQuery(SaleDetailFindManyArgs)
  async saleDetails(@common.Req() request: Request): Promise<SaleDetail[]> {
    const args = plainToClass(SaleDetailFindManyArgs, request.query);
    return this.service.saleDetails({
      ...args,
      select: {
        createdAt: true,
        id: true,

        item: {
          select: {
            id: true,
          },
        },

        quantity: true,

        sale: {
          select: {
            id: true,
          },
        },

        unitPrice: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SaleDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async saleDetail(
    @common.Param() params: SaleDetailWhereUniqueInput
  ): Promise<SaleDetail | null> {
    const result = await this.service.saleDetail({
      where: params,
      select: {
        createdAt: true,
        id: true,

        item: {
          select: {
            id: true,
          },
        },

        quantity: true,

        sale: {
          select: {
            id: true,
          },
        },

        unitPrice: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SaleDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSaleDetail(
    @common.Param() params: SaleDetailWhereUniqueInput,
    @common.Body() data: SaleDetailUpdateInput
  ): Promise<SaleDetail | null> {
    try {
      return await this.service.updateSaleDetail({
        where: params,
        data: {
          ...data,

          item: {
            connect: data.item,
          },

          sale: {
            connect: data.sale,
          },
        },
        select: {
          createdAt: true,
          id: true,

          item: {
            select: {
              id: true,
            },
          },

          quantity: true,

          sale: {
            select: {
              id: true,
            },
          },

          unitPrice: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SaleDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSaleDetail(
    @common.Param() params: SaleDetailWhereUniqueInput
  ): Promise<SaleDetail | null> {
    try {
      return await this.service.deleteSaleDetail({
        where: params,
        select: {
          createdAt: true,
          id: true,

          item: {
            select: {
              id: true,
            },
          },

          quantity: true,

          sale: {
            select: {
              id: true,
            },
          },

          unitPrice: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
