/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SaleDetail } from "./SaleDetail";
import { SaleDetailCountArgs } from "./SaleDetailCountArgs";
import { SaleDetailFindManyArgs } from "./SaleDetailFindManyArgs";
import { SaleDetailFindUniqueArgs } from "./SaleDetailFindUniqueArgs";
import { CreateSaleDetailArgs } from "./CreateSaleDetailArgs";
import { UpdateSaleDetailArgs } from "./UpdateSaleDetailArgs";
import { DeleteSaleDetailArgs } from "./DeleteSaleDetailArgs";
import { Item } from "../../item/base/Item";
import { Sale } from "../../sale/base/Sale";
import { SaleDetailService } from "../saleDetail.service";
@graphql.Resolver(() => SaleDetail)
export class SaleDetailResolverBase {
  constructor(protected readonly service: SaleDetailService) {}

  async _saleDetailsMeta(
    @graphql.Args() args: SaleDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SaleDetail])
  async saleDetails(
    @graphql.Args() args: SaleDetailFindManyArgs
  ): Promise<SaleDetail[]> {
    return this.service.saleDetails(args);
  }

  @graphql.Query(() => SaleDetail, { nullable: true })
  async saleDetail(
    @graphql.Args() args: SaleDetailFindUniqueArgs
  ): Promise<SaleDetail | null> {
    const result = await this.service.saleDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SaleDetail)
  async createSaleDetail(
    @graphql.Args() args: CreateSaleDetailArgs
  ): Promise<SaleDetail> {
    return await this.service.createSaleDetail({
      ...args,
      data: {
        ...args.data,

        item: {
          connect: args.data.item,
        },

        sale: {
          connect: args.data.sale,
        },
      },
    });
  }

  @graphql.Mutation(() => SaleDetail)
  async updateSaleDetail(
    @graphql.Args() args: UpdateSaleDetailArgs
  ): Promise<SaleDetail | null> {
    try {
      return await this.service.updateSaleDetail({
        ...args,
        data: {
          ...args.data,

          item: {
            connect: args.data.item,
          },

          sale: {
            connect: args.data.sale,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SaleDetail)
  async deleteSaleDetail(
    @graphql.Args() args: DeleteSaleDetailArgs
  ): Promise<SaleDetail | null> {
    try {
      return await this.service.deleteSaleDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Item, {
    nullable: true,
    name: "item",
  })
  async getItem(@graphql.Parent() parent: SaleDetail): Promise<Item | null> {
    const result = await this.service.getItem(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Sale, {
    nullable: true,
    name: "sale",
  })
  async getSale(@graphql.Parent() parent: SaleDetail): Promise<Sale | null> {
    const result = await this.service.getSale(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
